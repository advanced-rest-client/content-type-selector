{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`<content-type-selector>` is an element that provides an UI for selecting common\ncontent type values.\n\nThe element do not renders a value that is not defined on the list.\nInstead it shows the default label.\n\nIf the content type is more complex, mening has additional information like\n`multipart/form-data; boundary=something` then, in this case` only the\n`multipart/form-data` is taken into the account when computing selected item.\n\nThe element fires the `content-type-changed` custom event when the user change\nthe value in the drop down container. It is not fired when the change has not\nbeem cause by the user.\n\n### Example\n```\n<content-type-selector></content-type-selector>\n```\n\nThe list of content type values can be extended by setting child `<paper-item>`\nelements with the `data-type` attribute set to content type value.\n\n### Example\n```\n<content-type-selector>\n   <paper-item data-type=\"application/zip\">Zip file</paper-item>\n   <paper-item data-type=\"application/7z\">7-zip file</paper-item>\n</content-type-selector>\n```\n\n### Listening for content type change event\n\nBy default the element listens for the `content-type-changed` custom event on\nglobal `window` object. This can be controlled by setting the `eventsTarget`\nproperty to an element that will be used as an event listeners target.\nThis way the application can scope events accepted by this element.\n\nThis will not work for events dispatched on this element. The scoped element\nshould handle `content-type-changed` custom event and stop it's propagation\nif appropriate.\n\nOnce the `content-type-changed` custom event it changes value of current\ncontent type on this element unless the event has been canceled.\n\n### Styling\n`<content-type-selector>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--content-type-selector` | Mixin applied to the element | `{}`\n`--content-type-selector-item` | Mixin applied to dropdown items | `{}`\n\nThe element support styles for `paper-dropdown-menu`, `paper-listbox` and `paper-item`",
      "summary": "",
      "path": "content-type-selector.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\""
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "contentType",
          "type": "string",
          "description": "A value of a Content-Type header.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 8
            },
            "end": {
              "line": 121,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_contentTypeChanged\""
            }
          }
        },
        {
          "name": "selected",
          "type": "number",
          "description": "Index of currently selected item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 86,
              "column": 5
            },
            "end": {
              "line": 91,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 4
            },
            "end": {
              "line": 136,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ]
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 4
            },
            "end": {
              "line": 140,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ]
        },
        {
          "name": "_contentTypeChanged",
          "description": "Handles change of content type value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 4
            },
            "end": {
              "line": 166,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "contentType",
              "type": "String",
              "description": "New value"
            }
          ]
        },
        {
          "name": "_contentTypeHandler",
          "description": "If the event comes from different source then this element then it\nupdates `contentType` value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 4
            },
            "end": {
              "line": 182,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ]
        },
        {
          "name": "_contentTypeSelected",
          "description": "When chanding the editor it mey require to also change the content type header.\nThis function updates Content-Type.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 4
            },
            "end": {
              "line": 207,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "__getDropdownChildrenTypes",
          "description": "Creates a list of all content types added to this element.\nThis includes pre-existing onces and any added to loght DOM.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 4
            },
            "end": {
              "line": 228,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array",
            "desc": "Array of ordered content types (values of the\n`data-type` attribute)."
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 110,
          "column": 2
        },
        "end": {
          "line": 229,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "UiElements.ContentTypeSelector",
      "attributes": [
        {
          "name": "events-target",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "content-type",
          "description": "A value of a Content-Type header.",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 8
            },
            "end": {
              "line": 121,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "selected",
          "description": "Index of currently selected item.",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 24
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "content-type-changed",
          "description": "Fired when the `contentType` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "item",
          "range": {
            "file": "content-type-selector.html",
            "start": {
              "line": 46,
              "column": 8
            },
            "end": {
              "line": 46,
              "column": 33
            }
          }
        }
      ],
      "tagname": "content-type-selector",
      "mixins": [
        "ArcBehaviors.EventsTargetBehavior"
      ]
    }
  ]
}
