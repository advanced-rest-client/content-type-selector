/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   content-type-selector.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../events-target-behavior/events-target-behavior.d.ts" />
/// <reference path="../paper-dropdown-menu/paper-dropdown-menu.d.ts" />
/// <reference path="../paper-listbox/paper-listbox.d.ts" />
/// <reference path="../paper-item/paper-item.d.ts" />
/// <reference path="../web-animations-js/web-animations-next-lite.min.d.ts" />

declare namespace UiElements {

  /**
   * `<content-type-selector>` is an element that provides an UI for selecting common
   * content type values.
   *
   * The element do not renders a value that is not defined on the list.
   * Instead it shows the default label.
   *
   * If the content type is more complex, mening has additional information like
   * `multipart/form-data; boundary=something` then, in this case` only the
   * `multipart/form-data` is taken into the account when computing selected item.
   *
   * The element fires the `content-type-changed` custom event when the user change
   * the value in the drop down container. It is not fired when the change has not
   * beem cause by the user.
   *
   * ### Example
   * ```
   * <content-type-selector></content-type-selector>
   * ```
   *
   * The list of content type values can be extended by setting child `<paper-item>`
   * elements with the `data-type` attribute set to content type value.
   *
   * ### Example
   * ```
   * <content-type-selector>
   *    <paper-item data-type="application/zip">Zip file</paper-item>
   *    <paper-item data-type="application/7z">7-zip file</paper-item>
   * </content-type-selector>
   * ```
   *
   * ### Listening for content type change event
   *
   * By default the element listens for the `content-type-changed` custom event on
   * global `window` object. This can be controlled by setting the `eventsTarget`
   * property to an element that will be used as an event listeners target.
   * This way the application can scope events accepted by this element.
   *
   * This will not work for events dispatched on this element. The scoped element
   * should handle `content-type-changed` custom event and stop it's propagation
   * if appropriate.
   *
   * Once the `content-type-changed` custom event it changes value of current
   * content type on this element unless the event has been canceled.
   *
   * ### Styling
   * `<content-type-selector>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--content-type-selector` | Mixin applied to the element | `{}`
   * `--content-type-selector-item` | Mixin applied to dropdown items | `{}`
   *
   * The element support styles for `paper-dropdown-menu`, `paper-listbox` and `paper-item`
   */
  class ContentTypeSelector extends
    ArcBehaviors.EventsTargetBehavior(
    Polymer.Element) {

    /**
     * A value of a Content-Type header.
     */
    contentType: string|null|undefined;

    /**
     * Index of currently selected item.
     */
    selected: number|null|undefined;
    _attachListeners(node: any): void;
    _detachListeners(node: any): void;

    /**
     * Handles change of content type value
     *
     * @param contentType New value
     */
    _contentTypeChanged(contentType: String|null): void;

    /**
     * If the event comes from different source then this element then it
     * updates `contentType` value.
     */
    _contentTypeHandler(e: CustomEvent|null): void;

    /**
     * When chanding the editor it mey require to also change the content type header.
     * This function updates Content-Type.
     */
    _contentTypeSelected(e: any): void;
  }
}

interface HTMLElementTagNameMap {
  "content-type-selector": UiElements.ContentTypeSelector;
}
